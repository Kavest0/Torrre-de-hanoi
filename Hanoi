import time
import matplotlib.pyplot as plt

movimentos = []
bloco_1 = []
bloco_2 = []
bloco_3 = []
resultados = []

def hanoi_solver(n, b_origem, b_auxiliar, b_destino, nome_origem, nome_auxiliar, nome_destino):
    if n == 1:
        x = b_origem.pop()
        b_destino.append(x)
        movimentos.append(f"Disco {x} - Origem: {nome_origem} -> Destino: {nome_destino}")
    else:
        hanoi_solver(n-1, b_origem, b_destino, b_auxiliar, nome_origem, nome_destino, nome_auxiliar)
        x = b_origem.pop()
        b_destino.append(x)
        movimentos.append(f"Disco {x} - Origem: {nome_origem} -> Destino: {nome_destino}")
        hanoi_solver(n-1, b_auxiliar, b_origem, b_destino, nome_auxiliar, nome_origem, nome_destino)

def executar_hanoi(max_blocos):
    for n in range(1, max_blocos + 1):
        global movimentos, bloco_1, bloco_2, bloco_3
        movimentos = []
        bloco_1 = list(range(n-1, -1, -1))
        bloco_2 = []
        bloco_3 = []

        inicio = time.time()
        print(f"Torre de Hanoi com {n} blocos:")
        print("bloco 1:", bloco_1,"\nbloco 2:", bloco_2,"\nbloco 3:", bloco_3,"\n")
        hanoi_solver(len(bloco_1), bloco_1, bloco_2, bloco_3, "bloco_1", "bloco_2", "bloco_3")
        fim = time.time()

        print(f"Total de movimentos: {len(movimentos)}")
        print(f"Tempo total de execução: {fim - inicio:.6f} segundos\n")
        print("Movimentos:")
        for i in movimentos:
            print(i)
        print("\nbloco 1:", bloco_1,"\nbloco 2:", bloco_2,"\nbloco 3:", bloco_3,"")
        print("-" * 50)

        resultados.append((n, len(movimentos), fim - inicio))

# Configuração: número máximo de blocos
max_blocos = 10
executar_hanoi(max_blocos)

num_blocos = [r[0] for r in resultados]
num_movimentos = [r[1] for r in resultados]
tempos_execucao = [r[2] for r in resultados]


plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
plt.plot(num_blocos, num_movimentos, marker='o', label="Movimentos")
plt.title("Número de Movimentos por Quantidade de Blocos")
plt.xlabel("Quantidade de Blocos")
plt.ylabel("Número de Movimentos")
plt.grid(True)
plt.legend()


plt.subplot(1, 2, 2)
plt.plot(num_blocos, tempos_execucao, marker='o', color='orange', label="Tempo de Execução")
plt.title("Tempo de Execução por Quantidade de Blocos")
plt.xlabel("Quantidade de Blocos")
plt.ylabel("Tempo de Execução (segundos)")
plt.grid(True)
plt.legend()

plt.tight_layout()
plt.show()
